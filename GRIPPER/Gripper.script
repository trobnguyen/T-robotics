def Gripper():
  modbus_add_signal("192.168.1.30", 255, 1, 1, "MODBUS_1")
  modbus_set_signal_update_frequency("MODBUS_1", 10)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(12)
  set_input_actions_to_default()
  modbus_set_runstate_dependent_choice("MODBUS_1",0)
  set_tcp(p[0.0,0.0,0.19,0.0,0.0,0.0])
  set_payload(0.65)
  set_gravity([0.0, 0.0, 9.82])
  global i_timer=3521.51001
  global count1=0
  global count=0
  global i_buf=3840
  global Point_1=p[0.1747890096849296,0.279692608888669,0.4137421714570343,-1.513951241486145,0.6567055848599131,-0.7483031352624571]
  global Point_2=p[-0.21510434952784865,0.3394692021835605,0.2792668744898276,-2.6992158871508454,0.18815567098463984,1.0165159215471826]
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.8.1, On Robot ApS
  #   Type: RG Configuration
  global measure_width=0
  global grip_detected=False
  global lost_grip=False
  global zsysx=0
  global zsysy=0
  global zsysz=0.06935
  global zsysm=0.7415
  global zmasx=0
  global zmasy=0
  global zmasz=0.18664
  global zmasm=0
  global zmasm=0
  global zslax=0
  global zslay=0
  global zslaz=0
  global zslam=0
  global zslam=0
  thread lost_grip_thread():
  while True:
  set_tool_voltage(24)
  	if True ==get_digital_in(9):
  		sync()
  		sync()
  		sync()
  		if True == grip_detected:
  			if False == get_digital_in(8):
  				grip_detected=False
  				lost_grip=True
  			end
  		end
  	set_tool_analog_input_domain(0, 1)
  	set_tool_analog_input_domain(1, 1)
  	zscale = (get_analog_in(2)-0.026)/2.976
  	zangle = zscale*1.57079633-0.087266462
  	zwidth = 5+110*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	end
  	sync()
  end
  end
  lg_thr = run lost_grip_thread()
  def RG2(target_width=110, target_force=40, payload=0.0, set_payload=False, depth_compensation=False, slave=False):
  	grip_detected=False
  	if slave:
  		slave_grip_detected=False
  	else:
  		master_grip_detected=False
  	end
  	timeout = 0
  	while get_digital_in(9) == False:
  	  if timeout > 400:
  	    break
  	  end
  	  timeout = timeout+1
  	  sync()
  	end
  	def bit(input):
  	  msb=65536
  	  local i=0
  	  local output=0
  	  while i<17:
  	    set_digital_out(8,True)
  	    if input>=msb:
  	      input=input-msb
  	      set_digital_out(9,False)
  	    else:
  	      set_digital_out(9,True)
  	    end
  	    if get_digital_in(8):
  	      out=1
  	    end
  	    sync()
  	    set_digital_out(8,False)
  	    sync()
  	    input=input*2
  	    output=output*2
  	    i=i+1
  	  end
  	  return output
  	end
  	target_width=target_width+9.2
  	if target_force>40:
  	target_force=40
  	end
  	if target_force<4:
  	target_force=4
  	end
  	if target_width>110:
  	target_width=110
  	end
  	if target_width<0:
  	target_width=0
  	end
  	rg_data=floor(target_width)*4
  	rg_data=rg_data+floor(target_force/2)*4*111
  	if slave:
  	rg_data=rg_data+16384
  	end
  	bit(rg_data)
  	if depth_compensation:
  	finger_length = 55.0/1000
  	finger_heigth_disp = 5.0/1000
  	center_displacement = 7.5/1000
  
  	start_pose = get_forward_kin()
  	set_analog_inputrange(2, 1)
  	zscale = (get_analog_in(2)-0.026)/2.976
  	zangle = zscale*1.57079633-0.087266462
  	zwidth = 5+110*sin(zangle)
  
  	start_depth = cos(zangle)*finger_length
  
  	sync()
  	sync()
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout=timeout+1
  	  sync()
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	while get_digital_in(9) == False:
  	  zscale = (get_analog_in(2)-0.026)/2.976
  	  zangle = zscale*1.57079633-0.087266462
  	  zwidth = 5+110*sin(zangle)
  	  measure_depth = cos(zangle)*finger_length
  	  compensation_depth = (measure_depth - start_depth)
  	  target_pose = pose_trans(start_pose,p[0,0,-compensation_depth,0,0,0])
  	  if timeout > 400:
  	    break
  	  end
  	  timeout=timeout+1
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	#textmsg("end gripper move!!!!!")
  	#nspeedthr = 0.001
  	#nspeed = norm(get_actual_tcp_speed())
  	#while nspeed > nspeedthr:
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  nspeed = norm(get_actual_tcp_speed())
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	if point_dist(target_pose, get_forward_kin()) > 0.005:
  	popup("Lower grasping force or max width",title="RG-lag threshold exceeded", warning=False, error=False, blocking=False)
  	end
  	end
  	nspeed = norm(get_actual_tcp_speed())
  	while nspeed > 0.001:
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	nspeed = norm(get_actual_tcp_speed())
  	end
  	stopj(2)
  	end
  	if depth_compensation==False:
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	while get_digital_in(9) == False:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > 400:
  	    break
  	  end
  	end
  	end
  	sync()
  	sync()
  	sync()
  	if set_payload:
  	if slave:
  	if get_analog_in(3) < 2:
  	zslam=0
  	else:
  	zslam=payload
  	end
  	else:
  	if get_digital_in(8) == False:
  	zmasm=0
  	else:
  	zmasm=payload
  	end
  	end
  	zload=zmasm+zslam+zsysm
  	set_payload(zload,[(zsysx*zsysm+zmasx*zmasm+zslax*zslam)/zload,(zsysy*zsysm+zmasy*zmasm+zslay*zslam)/zload,(zsysz*zsysm+zmasz*zmasm+zslaz*zslam)/zload])
  	end
  	master_grip_detected=False
  	master_lost_grip=False
  	slave_grip_detected=False
  	slave_lost_grip=False
  	if True == get_digital_in(8):
  		master_grip_detected=True
  	end
  	if get_analog_in(3)>2:
  		slave_grip_detected=True
  	end
  	grip_detected=False
  	lost_grip=False
  	if True == get_digital_in(8):
  		grip_detected=True
  	end
  	zscale = (get_analog_in(2)-0.026)/2.976
  	zangle = zscale*1.57079633-0.087266462
  	zwidth = 5+110*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	if slave:
  	slave_measure_width=measure_width
  	else:
  	master_measure_width=measure_width
  	end
  	return grip_detected
  end
  set_tool_voltage(24)
  set_tcp(p[0,0,0.18664,0,-0,0])
  # end: URCap Installation Node
  $ 1 "BeforeStart"
  $ 2 "var_1≔socket_open('192.168.1.20',30000)"
  global var_1=socket_open("192.168.1.20",30000)
  $ 3 "MoveJ"
  $ 4 "Waypoint_1"
  movej([0.8985273443764581, -1.2178763864185802, -1.5884917487860353, -1.924905809866737, 1.5414484549993523, 0.029139607462268416], a=1.3962634015954636, v=1.0471975511965976)
  while (True):
    $ 5 "Robot Program"
    $ 6 "Loop var_1≟ False "
    while (var_1 ==   False  ):
      $ 7 "var_1≔socket_open('192.168.1.20',30000)"
      global var_1=socket_open("192.168.1.20",30000)
      $ 8 "Wait: 0.05"
      sleep(0.05)
    end
    $ 9 "socket_send_string('ready')"
    socket_send_string("ready")
    $ 10 "Wait: 0.5"
    sleep(0.5)
    $ 11 "var_2≔socket_read_ascii_float(1)"
    global var_2=socket_read_ascii_float(1)
    $ 12 "Wait: 0.5"
    sleep(0.5)
    $ 14 "If var_2[1]≟1"
    if (var_2[1] == 1):
      # begin: URCap Program Node
      #   Source: RG - On Robot, 1.8.1, On Robot ApS
      #   Type: RG2
      $ 15 "RG2(100)"
      RG2(100,40,0.0,True,False,False)
      # end: URCap Program Node
      $ 16 "Wait: 0.1"
      sleep(0.1)
    else:
      $ 17 "ElseIf var_2[1]≟0"
      if (var_2[1] == 0):
        # begin: URCap Program Node
        #   Source: RG - On Robot, 1.8.1, On Robot ApS
        #   Type: RG2
        $ 18 "RG2(0)"
        RG2(0,40,0.0,True,False,False)
        # end: URCap Program Node
        $ 19 "Wait: 0.1"
        sleep(0.1)
      end
    end
  end
end
